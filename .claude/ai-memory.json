{"type":"entity","name":"moonzoon-novyui usage","entityType":"code_pattern","observations":["println! in WASM frontend does nothing - use zoon's console logging instead","For frontend logging, need to use zoon crate's logging utilities","std::println! won't work in browser/WASM environment","Core pattern: button().label().variant().build() with IconName enum tokens","Integrated successfully with working click events and proper compilation"]}
{"type":"entity","name":"NovyWave design analysis","entityType":"architecture","observations":["Professional waveform viewer application with dark/light themes","Complex 4-panel layout: Files & Scopes (left), Selected Variables (center-left), main waveform view (center-right), Variables list (bottom-left)","File tree structure showing .fst format files with hierarchical scopes","Variable list with type indicators (Wire 1-bit Input/Output)","Waveform timeline with precise timing (10s, 20s, 30s, etc.) and zoom controls","Professional waveform visualization with blue signal traces on dark/light backgrounds","Target resolutions: 1440x1024 and 1920x1080","Browser-style interface with URL bar showing novywave.io domain","Current simple Fast2D examples will be completely replaced","Requires sophisticated state management for file loading, variable selection, timeline navigation","Heavy use of tree views, panels, and complex data visualization components"]}
{"type":"entity","name":"NovyWave Frontend UI Plan","entityType":"implementation_plan","observations":["Phase 1: Component analysis - NovyUI has TreeView, Button, Input, Badge, Card, List, Icon, Typography","Phase 2: 4-panel layout - app_header() + main_layout(files_panel, variables_panel, selected_panel, waveform_panel)","Phase 3: Step-by-step implementation starting with basic layout framework","Step 1: Responsive 4-panel grid using Zoon layout + Card containers","Step 2: Files & Scopes panel with TreeView + mock .fst files + search input","Step 3: Variables panel with searchable list + type badges + selection","Step 4: Selected Variables panel with remove buttons + drag handles + Remove All","Step 5: Waveform panel placeholder with timeline + zoom controls + timing labels","Step 6: Dark/light theme system matching design mockups","Step 7: Responsive layout for 1440x1024 and 1920x1080","Extensions needed: Panel Splitter, Timeline Controls, Enhanced TreeView, Variable List Item","Mock data strategy: realistic .fst hierarchy, variable types, timing data","Browser-only testing initially, skip Tauri","UI-first approach before functionality implementation"]}
{"type":"entity","name":"NovyWave current state","entityType":"project_status","observations":["Button component API was inconsistent - used string icons while Input used IconName tokens","Fixed Button.left_icon() and Button.right_icon() to accept IconName instead of &'static str","Button component internally converts IconName to string using .to_kebab_case()","All NovyUI components now have consistent icon API using IconName design tokens","IconName::ArrowDownToLine was successfully added to NovyUI icon registry for dock-to-bottom functionality","Successfully implemented proper header layout for all three panels: Files & Scopes, Variables, Selected Variables","Variables panel header now includes search input with search icon, properly sized as InputSize::Small","All button icons now use proper IconName tokens: Check, Folder, X, ArrowDownToLine, ZoomIn, ZoomOut","Runtime icon validation system added with warnings for unregistered icons and debug validation function","Working NovyUI components integrated into frontend codebase","Target: Professional waveform viewer UI replacing current Fast2D examples","Build system functional: makers start/build for browser + Tauri platforms"]}
{"type":"entity","name":"User Development Preferences","entityType":"developer_behavior","observations":["Prioritizes exact Figma design matching over generic implementations","Corrects layout issues immediately when noticed (button positioning, overflow)","Emphasizes following CLAUDE.md rules consistently (Memory MCP usage, testing workflow)","Expects proper responsive design - no horizontal scrollbars unless absolutely necessary","Values clean code organization and proper development workflow adherence"]}
{"type":"entity","name":"MoonZoon","entityType":"Framework","observations":["New Stripe element in MoonZoon/Zoon framework allows easy switching between Column and Row layouts","Stripe element simplifies conditional layout switching compared to using type-incompatible Column/Row returns"]}
{"type":"entity","name":"Stripe Element","entityType":"MoonZoon Component","observations":["Stripe element allows dynamic switching between Row and Column layouts","Use .direction_signal() with Direction::Row or Direction::Column for dynamic layout changes","Use .item_signal() for conditional rendering of different content based on signals","Must use .into_element() to unify types when using if/else branches in signals","Perfect for dock/undock functionality or responsive layouts"]}
{"type":"entity","name":"MoonZoon Framework","entityType":"Web Framework","observations":["Rust frontend framework for building reactive web applications","Uses signals for reactive state management","When using signals with if/else branches that return different element types (e.g. Row vs Column), you must convert both to the same type using .into_element()","child_signal requires both branches of if/else to return exactly the same type","Signal-based layout switching requires careful type unification"]}
{"type":"entity","name":"Zoon Layout Height Pattern","entityType":"development_pattern","observations":["Height::screen() + Height::fill() hierarchy is essential for full-screen layouts in Zoon framework","Root element should use Height::screen() to claim full viewport height","All descendant containers must use Height::fill() to properly inherit and distribute height","Common issue: missing Height::fill() in any container breaks the height inheritance chain","Debug technique: Use bright background colors on containers to visualize which elements are properly filling height","Pattern works for both docked layouts: 'Docked to Right' and 'Docked to Bottom' modes"]}
{"type":"entity","name":"Panel Resizing Debug Pattern","entityType":"debugging_technique","observations":["Hardcoded height constraints (.min().max()) prevent dynamic resizing via drag operations","Panel height should be controlled by signal state (FILES_PANEL_HEIGHT, MAIN_AREA_HEIGHT) not hardcoded limits","files_panel_with_height() properly uses FILES_PANEL_HEIGHT.signal() for 'Docked to Right' mode","Horizontal divider controls different height signals depending on layout mode","Always remove hardcoded constraints when implementing draggable panel resizing"]}
{"type":"entity","name":"NovyWave Core Architecture","entityType":"architecture","observations":["Dual-platform: Web + Tauri desktop using shared Rust/WASM frontend","Framework stack: Zoon frontend, Moon backend, Fast2D graphics, NovyUI components","Target: Professional waveform viewer with 4-panel layout replacing current Fast2D examples","Entry point: frontend/src/main.rs with font loading and app initialization"]}
{"type":"entity","name":"Development Workflow Rules","entityType":"process","observations":["MANDATORY: Start sessions with mcp__memory__search_nodes for context","WASM compilation: Use makers start background process, monitor mzoon.log, never cargo build/check","Auto-reload only after successful compilation - never check browser before compilation succeeds","Store immediately: solved bugs, new patterns, architectural decisions in Memory MCP"]}
{"type":"entity","name":"NovyUI Design System","entityType":"component_library","observations":["ALL icons use IconName enum tokens for compile-time safety","Button API: button().label().variant().left_icon(IconName::X).build()","Responsive: Width::fill() required, Font::new().no_wrap() prevents wrapping","Three-zone headers: title, spacer with centered content, right buttons"]}
{"type":"entity","name":"Memory Management Rules","entityType":"process","observations":["MANDATORY: Every session starts with mcp__memory__search_nodes for context","Store immediately: bugs solved, patterns discovered, decisions made","Entity limit: 3-5 observations maximum per entity","Memory MCP vs CLAUDE.md: persistent patterns vs core rules"]}
{"type":"entity","name":"Automated Memory Context System","entityType":"infrastructure","observations":["Hooks auto-generate session-context.md on first tool use and after Memory MCP usage","CLAUDE.md imports @docs/session-context.md for immediate context availability","Zero manual intervention required - context always fresh and current","PreToolUse + PostToolUse hooks maintain synchronized context throughout session","All AI documentation properly organized in ai-docs/ folder not docs/ folder","Hook scripts updated to generate session-context.md in ai-docs/ directory","CLAUDE.md imports from @ai-docs/ paths for clean separation of AI vs human documentation","Hooks auto-generate focus-context.md (renamed from session-context.md) for productivity focus","CLAUDE.md imports @ai-docs/focus-context.md for immediate focused context availability","File contains: Current State, Recent Solutions, Current Blockers, Daily Patterns, Next Steps"]}
{"type":"entity","name":"Claude Code Collaboration Guide","entityType":"documentation","observations":["Comprehensive guide for humans on working with Claude Code effectively","Explains automated memory system, slash commands, and optimal workflows","Located in docs/working-with-claude.md for human reference","Covers when to use each slash command and troubleshooting steps"]}
{"type":"entity","name":"Project Structure Migration","entityType":"milestone","observations":["Successfully flattened nested novywave/ folder to repository root","All systems verified working: Memory MCP, session context hooks, slash commands","Updated .mcp.json paths to use root-level ai-memory.json location","Hook scripts properly reference ./ai-docs/ instead of ./novywave/ai-docs/"]}
{"type":"entity","name":"current_session_state","entityType":"current_session_state","observations":["Working on command system optimization and memory hooks","All slash commands properly configured and tested","Hook system redesigned for focused productivity context","Next focus: Test new Memory MCP entity structure","Completed focused productivity system implementation","Updated all documentation to reflect new system","CLAUDE.md, working-with-claude.md, memory-best-practices.md all updated","System is now simple, automatic, and reliable as requested","Successfully reorganized project structure - all Claude Code files now in .claude/","Hook system working with new .claude/ai-docs/ path","Project root is now clean with only core project files"]}
{"type":"entity","name":"recent_solutions","entityType":"recent_solutions","observations":["Fixed IconName compilation errors by using mut self and .take() method","Resolved hook system by separating automatic (hooks/) vs manual (scripts/) scripts","Fixed global /tmp pollution by using local .claude/hooks.log instead","Corrected Memory MCP NDJSON parsing with proper jq syntax for line-by-line processing","Renamed /store-pattern command to /note for simplicity and clarity","Reorganized all Claude Code files into .claude/ folder for better organization"]}
{"type":"entity","name":"active_blockers","entityType":"active_blockers","observations":["None - all systems working properly"]}
{"type":"entity","name":"daily_patterns","entityType":"daily_patterns","observations":["Use IconName enum tokens, never strings for icons","Use zoon::println!() for WASM logging, never std::println!()","Use Height::screen() + Height::fill() pattern for full-screen layouts","Always use Width::fill() for responsive design, avoid fixed widths","Store patterns immediately in Memory MCP after solving bugs"]}
{"type":"entity","name":"next_steps","entityType":"next_steps","observations":["Test the new focused context generation system","Verify hook system works with new entity types","Continue with waveform viewer UI implementation when ready"]}
{"type":"relation","from":"NovyWave current state","to":"NovyWave Frontend UI Plan","relationType":"leads_to"}
{"type":"relation","from":"NovyWave Frontend UI Plan","to":"moonzoon-novyui usage","relationType":"depends_on"}
{"type":"relation","from":"NovyWave Frontend UI Plan","to":"NovyWave design analysis","relationType":"implements"}
{"type":"relation","from":"NovyWave project","to":"Stripe Element","relationType":"uses"}
{"type":"relation","from":"Stripe Element","to":"MoonZoon Framework","relationType":"is part of"}
{"type":"relation","from":"NovyWave project","to":"Zoon Layout Height Pattern","relationType":"uses"}
{"type":"relation","from":"Zoon Layout Height Pattern","to":"Panel Resizing Debug Pattern","relationType":"combines_with"}
{"type":"relation","from":"Martin Kavik","to":"Zoon Layout Height Pattern","relationType":"discovered"}